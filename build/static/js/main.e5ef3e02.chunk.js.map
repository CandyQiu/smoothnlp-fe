{"version":3,"sources":["canvas.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","nextProps","init","data","tokens","entities","c","document","getElementById","ctx","getContext","clength","i","length","thisLen","token","j","text","nerTagLen","nerTag","width","height","clearRect","len","fillStyle","font","fillText","postag","console","log","react_default","a","createElement","className","id","Component","App","search","self","refs","search_input","value","fetch","then","response","json","setState","catch","error","event","keyCode","alt","src","ref","placeholder","onKeyUp","onkeyUp","bind","onClick","canvas","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5ef3e02.chunk.js","sourcesContent":["import React, {\n  Component\n} from 'react';\n\nimport './App.css';\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    this.init(nextProps.data);\n  }\n  init(data) {\n    let tokens = data.tokens;\n    let entities = data.entities;\n\n    let c = document.getElementById(\"myCanvas\");\n    let ctx = c.getContext(\"2d\");\n    // 设置画布宽高\n    let clength = 10;\n    for (let i = 0; i < tokens.length; i++) {\n      let thisLen = tokens[i].token.length * 25 + 10;\n      for (let j = 0; j < entities.length; j++) {\n        if (entities[j].text === tokens[i].token) {\n          let nerTagLen = entities[j].nerTag.length * 10 + 10;\n          thisLen = nerTagLen > thisLen ? nerTagLen : thisLen;\n        }\n      }\n      clength = clength + thisLen;\n    }\n\n    c.width = clength;\n    c.height = 100;\n\n    // 清除画布\n    ctx.clearRect(0, 0, c.width, c.height);\n    // 词法分析\n    let len = 10;\n    for (let i = 0; i < tokens.length; i++) {\n      let thisLen = 0;\n      // console.log(tokens[i].token.length);\n      // console.log(tokens[i].token.length * 25);\n      // console.log(len);\n      thisLen = tokens[i].token.length * 25;\n\n      ctx.fillStyle = \"#132c42\";\n      ctx.font = \"16px 微软雅黑\";\n      ctx.fillText(tokens[i].token, len, 20);\n\n      ctx.fillStyle = \"#66879c\";\n      ctx.font = \"12px 微软雅黑\";\n      ctx.fillText(tokens[i].postag, len, 50);\n\n\n      for (let j = 0; j < entities.length; j++) {\n        if (entities[j].text === tokens[i].token) {\n          ctx.fillStyle = \"#42d2cd\";\n          ctx.font = \"12px 微软雅黑\";\n          ctx.fillText(entities[j].nerTag, len, 70);\n          let nerTagLen = entities[j].nerTag.length * 9 + 5;\n          console.log(thisLen);\n\n          console.log(nerTagLen);\n\n          thisLen = nerTagLen > thisLen ? nerTagLen : thisLen;\n\n          console.log(thisLen);\n\n        }\n      }\n\n      console.log(\"thisLen: \", thisLen);\n\n\n      len = len + thisLen;\n      console.log(\"len: \", len);\n\n      // console.log(tokens[i].token.length);\n    }\n\n  }\n  render() {\n    return (\n      <div className=\"Canvas\">\n        <div>\n          <div className=\"title\">词法分析</div>\n          <div className=\"canvas-area\">\n            <canvas id=\"myCanvas\">\n             你的浏览器不支持canvas,请升级你的浏览器\n             </canvas>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Canvas;","import React, {\n  Component\n} from 'react';\nimport Canvas from './canvas.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n    };\n    this.search();\n  }\n  search() {\n    let self = this;\n    // let defaultText = \"HanLP是由一系列模型与算法组成的工具包，目标是普及自然语言处理在生产环境中的应用。\";\n    let defaultText = \"万科集团去年3亿营收3亿营收\";\n    // let defaultText = \"HHHHH:CC\";\n    // let defaultText = \"HHHHH:CC\";\n    let text = (this.refs.search_input && this.refs.search_input.value) || defaultText;\n    let url = \"http://huricane.smoothnlp.com:18000/?text=\" + text;\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n        // 词法分析\n        // let tokens = data.tokens;\n        self.setState({\n          data\n        })\n      })\n      .catch(error => console.error(error))\n  }\n  onkeyUp(event) {\n    if (event.keyCode === 13) {\n      this.search();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <img className=\"App-logo\" alt=\"logo\"  src=\"http://www.smoothnlp.com/static/images/smoothnlp_hlog.png\" />\n      </header>\n      <div className=\"search\">\n        <input className=\"search-input\" ref=\"search_input\" placeholder=\"请输入一个句子进行分析\"  onKeyUp={this.onkeyUp.bind(this)}  />\n        <button className=\"search-button\" onClick={this.search.bind(this)}>Search</button>\n      </div>\n      <Canvas data={this.state.data}/>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}